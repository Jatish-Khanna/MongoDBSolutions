var pipeline = [ { $match: { 

				"imdb.rating" : { $gte : 7},
				"genres" : { $nin : ["Crime", "Horror"] },
				"rated" : { $in : ["PG", "G"]},
				"languages" : {$all : ["English", "Japanese"]}
				} }, { $project: { "title" : 1, "_id" : 0, "rated" : 1 } } ]
				

var pipeline = [ { $project : { "titleOM" : { $split : [
				"$title", " "]
				}, "_id" : 0} }, {$project : { "sizeOA" : {$size : "$titleOM"}}}, {$match : { sizeOA : {$eq : 1}}} ]
				
				
var pipeline = [{ $match : { "title" : "labor of love"}}]

var pipeline = [ {
					$match : { writers : { $exists : true},
								cast : { $exists : true},
								directors : { $exists : true}
							}
				},{
					$project : {
						writers: {
						  $map: {
							input: "$writers",
							as: "writer",
							in: {
							  $arrayElemAt: [
								{
								  $split: [ "$$writer", " (" ]
								},
								0
							  ]
							}
						  }
						},
						"directors" : 1,
						"cast" : 1,
						"_id" : 0
					}
				}, {
					$project : { "common" : {
						$setIntersection: [ "$cast", "$writers", "$directors"]}} 
				},{
					$addFields : {"count" : { $size : "$common"}}
				}, {
					$match : { count : { $gt : 0}}
				}, {
					$count : "love of labour" 
				}
				]




var pipeline = [ { $match: { 

				"countries" : "USA",
				"tomatoes.viewer.rating" : {$gte : 3},
				"cast" : { $exists : true}
				} }, 
				{ $addFields: { "favorites_cast": { $setIntersection : [ "$cast", [
									  "Sandra Bullock",
									  "Tom Hanks",
									  "Julia Roberts",
									  "Kevin Spacey",
									  "George Clooney"] ]
									  } 
							} 
				},{
					$addFields : {"num_favs" : { $size : "$favorites_cast"}}
				},{
				$sort : {"num_favs" :  -1, "tomatoes.viewer.rating" : -1, "title" : -1}
				},{
					$skip : 24
				},				
				{
					$limit : 1
				}]
				


var pipeline = [ { $match: { 

				"languages" : "English",
				"imdb.rating" : {$gte : 1},
				"imdb.votes" : {$gte : 1},
				"year" : {$gte : 1990}
				} },
				{ $addFields : { "scaled_votes" : {
				$add: [
				  1,
				  {
					$multiply: [
					  9,
					  {
						$divide: [
						  { $subtract: ["$imdb.votes", 5] },
						    1521100
						]
					  }
					]
				  }
				]
			  } } }, {
				$addFields : { "normalized_rating" : {$avg : [ "$imdb.rating", "$scaled_votes" ] }}
			  },
			  {
				$sort : {"normalized_rating" : 1}
			  }
			  ,
				{
					$limit : 2
				}]


Problem:
Let's use our increasing knowledge of the Aggregation Framework to explore our movies collection in more detail. 
We'd like to calculate how many movies every cast member has been in and get an average imdb.rating for each cast member.

What is the name, number of movies, and average rating (truncated to one decimal) 
for the cast member that has been in the most number of movies with English as an available language?

Provide the input in the following order and format

var pipeline = [ {
					$match : {
						cast : { $exists : true},
						languages : "English"
					}
				},
				{$unwind : "$cast" }, 
				{
					$group : {
						_id : "$cast",
						numFilms : {$sum : 1},
						average: { $avg: "$imdb.rating"}
					}
				},{$sort : {numFilms : -1}}
				]
				


Which alliance from air_alliances flies 
the most routes with either a Boeing 747 or an Airbus A380 (abbreviated 747 and 380 in air_routes)?

var pipeline = [{
					$lookup : {
						from : "air_routes",
						localField : "airlines",
						foreignField : "airline.name",
						as : "routes_collection"
					}
				},
				{
					$project : { _id : 0, name : 1, routes_collection : 1}
				}, {
					$unwind : "$routes_collection"
				}, {
					$match : { "routes_collection.airplane" : { $in : ["747", "380"]}}
				}
				]
				

Problem:

How many movies are in both the top ten highest rated movies according to 
the imdb.rating and the metacritic fields? We should get these results with exactly one access to the database.

Hint: What is the intersection?

var pipeline = [{
					$match : {
						"imdb.rating" : {$gt : 0},
						metacritic : { $gt : 0}
					}
				},
				{
					$facet : {
						"top_ten_meta" : [
							{$sort : {"metacritic" : -1}},
							{$limit : 10},
							{$project : {_id : 0, title : 1}}
						],
						"top_ten_imdb" : [
							{$sort : {"imdb.rating" : -1}},
							{$limit : 10},
							{$project : {_id : 0, title : 1}}
						]
					}
				}, {
					$addFields : { "common" : {
						$setIntersection: [ "$top_ten_imdb", "$top_ten_meta"]}} 
				}]


For all films that won at least 1 Oscar, calculate the standard deviation, 
highest, lowest, and average imdb.rating. Use the sample standard deviation expression.
HINT - All movies in the collection that won an Oscar begin with a string resembling one of the following in their awards field

var pipeline = [{
				$match : {
					awards : {$regex : /Won \d{1,2} Oscar/},
					"imdb.rating" : {$gt : 0}
				}
			},
			{
				$group : {
					_id: null,
					count : {$sum : 1},
					"highest_rating" : {$max : "$imdb.rating"},
					"lowest_rating" : {$min : "$imdb.rating"},
					average_rating: { $avg: "$imdb.rating" },
					deviation: { $stdDevSamp: "$imdb.rating" }
				}
			}]
